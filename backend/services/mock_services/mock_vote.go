// Code generated by MockGen. DO NOT EDIT.
// Source: backend/services/vote.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockVoteService is a mock of VoteService interface
type MockVoteService struct {
	ctrl     *gomock.Controller
	recorder *MockVoteServiceMockRecorder
}

// MockVoteServiceMockRecorder is the mock recorder for MockVoteService
type MockVoteServiceMockRecorder struct {
	mock *MockVoteService
}

// NewMockVoteService creates a new mock instance
func NewMockVoteService(ctrl *gomock.Controller) *MockVoteService {
	mock := &MockVoteService{ctrl: ctrl}
	mock.recorder = &MockVoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVoteService) EXPECT() *MockVoteServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockVoteService) Get(lang, name string, fields []string) []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", lang, name, fields)
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockVoteServiceMockRecorder) Get(lang, name, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVoteService)(nil).Get), lang, name, fields)
}

// Vote mocks base method
func (m *MockVoteService) Vote(lang, name string, newColors []string, getUserID func() (string, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Vote", lang, name, newColors, getUserID)
}

// Vote indicates an expected call of Vote
func (mr *MockVoteServiceMockRecorder) Vote(lang, name, newColors, getUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockVoteService)(nil).Vote), lang, name, newColors, getUserID)
}

// RemoveByUser mocks base method
func (m *MockVoteService) RemoveByUser(userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveByUser", userID)
}

// RemoveByUser indicates an expected call of RemoveByUser
func (mr *MockVoteServiceMockRecorder) RemoveByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByUser", reflect.TypeOf((*MockVoteService)(nil).RemoveByUser), userID)
}
