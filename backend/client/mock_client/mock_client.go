// Code generated by MockGen. DO NOT EDIT.
// Source: backend/client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetUserIDFunc mocks base method
func (m *MockClient) GetUserIDFunc(ctx *gin.Context) func() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFunc", ctx)
	ret0, _ := ret[0].(func() (string, error))
	return ret0
}

// GetUserIDFunc indicates an expected call of GetUserIDFunc
func (mr *MockClientMockRecorder) GetUserIDFunc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFunc", reflect.TypeOf((*MockClient)(nil).GetUserIDFunc), ctx)
}

// SetUserIDFunc mocks base method
func (m *MockClient) SetUserIDFunc(ctx *gin.Context) func(string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserIDFunc", ctx)
	ret0, _ := ret[0].(func(string) error)
	return ret0
}

// SetUserIDFunc indicates an expected call of SetUserIDFunc
func (mr *MockClientMockRecorder) SetUserIDFunc(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserIDFunc", reflect.TypeOf((*MockClient)(nil).SetUserIDFunc), ctx)
}
