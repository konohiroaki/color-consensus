// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repositories/user.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// IsPresent mocks base method
func (m *MockUserRepository) IsPresent(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPresent indicates an expected call of IsPresent
func (mr *MockUserRepositoryMockRecorder) IsPresent(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockUserRepository)(nil).IsPresent), id)
}

// Add mocks base method
func (m *MockUserRepository) Add(nationality, gender string, birth int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", nationality, gender, birth)
	ret0, _ := ret[0].(string)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockUserRepositoryMockRecorder) Add(nationality, gender, birth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserRepository)(nil).Add), nationality, gender, birth)
}

// Remove mocks base method
func (m *MockUserRepository) Remove(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockUserRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockUserRepository)(nil).Remove), id)
}
