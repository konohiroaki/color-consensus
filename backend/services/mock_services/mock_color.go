// Code generated by MockGen. DO NOT EDIT.
// Source: backend/services/color.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockColorService is a mock of ColorService interface
type MockColorService struct {
	ctrl     *gomock.Controller
	recorder *MockColorServiceMockRecorder
}

// MockColorServiceMockRecorder is the mock recorder for MockColorService
type MockColorServiceMockRecorder struct {
	mock *MockColorService
}

// NewMockColorService creates a new mock instance
func NewMockColorService(ctrl *gomock.Controller) *MockColorService {
	mock := &MockColorService{ctrl: ctrl}
	mock.recorder = &MockColorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColorService) EXPECT() *MockColorServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockColorService) GetAll() []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockColorServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockColorService)(nil).GetAll))
}

// Add mocks base method
func (m *MockColorService) Add(lang, name, code string, getUserID func() (string, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", lang, name, code, getUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockColorServiceMockRecorder) Add(lang, name, code, getUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockColorService)(nil).Add), lang, name, code, getUserID)
}

// GetNeighbors mocks base method
func (m *MockColorService) GetNeighbors(code string, size int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNeighbors", code, size)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNeighbors indicates an expected call of GetNeighbors
func (mr *MockColorServiceMockRecorder) GetNeighbors(code, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNeighbors", reflect.TypeOf((*MockColorService)(nil).GetNeighbors), code, size)
}

// IsValidCodeFormat mocks base method
func (m *MockColorService) IsValidCodeFormat(input string) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidCodeFormat", input)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// IsValidCodeFormat indicates an expected call of IsValidCodeFormat
func (mr *MockColorServiceMockRecorder) IsValidCodeFormat(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidCodeFormat", reflect.TypeOf((*MockColorService)(nil).IsValidCodeFormat), input)
}
