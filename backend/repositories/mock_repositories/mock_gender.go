// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repositories/gender.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGenderRepository is a mock of GenderRepository interface
type MockGenderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGenderRepositoryMockRecorder
}

// MockGenderRepositoryMockRecorder is the mock recorder for MockGenderRepository
type MockGenderRepositoryMockRecorder struct {
	mock *MockGenderRepository
}

// NewMockGenderRepository creates a new mock instance
func NewMockGenderRepository(ctrl *gomock.Controller) *MockGenderRepository {
	mock := &MockGenderRepository{ctrl: ctrl}
	mock.recorder = &MockGenderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenderRepository) EXPECT() *MockGenderRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockGenderRepository) GetAll() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockGenderRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockGenderRepository)(nil).GetAll))
}

// IsPresent mocks base method
func (m *MockGenderRepository) IsPresent(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPresent", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPresent indicates an expected call of IsPresent
func (mr *MockGenderRepositoryMockRecorder) IsPresent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPresent", reflect.TypeOf((*MockGenderRepository)(nil).IsPresent), arg0)
}
