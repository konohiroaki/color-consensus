// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repositories/language.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLanguageRepository is a mock of LanguageRepository interface
type MockLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLanguageRepositoryMockRecorder
}

// MockLanguageRepositoryMockRecorder is the mock recorder for MockLanguageRepository
type MockLanguageRepositoryMockRecorder struct {
	mock *MockLanguageRepository
}

// NewMockLanguageRepository creates a new mock instance
func NewMockLanguageRepository(ctrl *gomock.Controller) *MockLanguageRepository {
	mock := &MockLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLanguageRepository) EXPECT() *MockLanguageRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockLanguageRepository) GetAll() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockLanguageRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockLanguageRepository)(nil).GetAll))
}

// IsCodePresent mocks base method
func (m *MockLanguageRepository) IsCodePresent(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCodePresent", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCodePresent indicates an expected call of IsCodePresent
func (mr *MockLanguageRepositoryMockRecorder) IsCodePresent(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCodePresent", reflect.TypeOf((*MockLanguageRepository)(nil).IsCodePresent), key)
}
