// Code generated by MockGen. DO NOT EDIT.
// Source: backend/services/user.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// IsLoggedIn mocks base method
func (m *MockUserService) IsLoggedIn(getUserID func() (string, error)) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoggedIn", getUserID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLoggedIn indicates an expected call of IsLoggedIn
func (mr *MockUserServiceMockRecorder) IsLoggedIn(getUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoggedIn", reflect.TypeOf((*MockUserService)(nil).IsLoggedIn), getUserID)
}

// GetID mocks base method
func (m *MockUserService) GetID(getUserID func() (string, error)) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID", getUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetID indicates an expected call of GetID
func (mr *MockUserServiceMockRecorder) GetID(getUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockUserService)(nil).GetID), getUserID)
}

// SignUpAndLogin mocks base method
func (m *MockUserService) SignUpAndLogin(nationality, gender string, birth int, setUserID func(string) error) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpAndLogin", nationality, gender, birth, setUserID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SignUpAndLogin indicates an expected call of SignUpAndLogin
func (mr *MockUserServiceMockRecorder) SignUpAndLogin(nationality, gender, birth, setUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpAndLogin", reflect.TypeOf((*MockUserService)(nil).SignUpAndLogin), nationality, gender, birth, setUserID)
}

// TryLogin mocks base method
func (m *MockUserService) TryLogin(userID string, setUserID func(string) error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLogin", userID, setUserID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryLogin indicates an expected call of TryLogin
func (mr *MockUserServiceMockRecorder) TryLogin(userID, setUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLogin", reflect.TypeOf((*MockUserService)(nil).TryLogin), userID, setUserID)
}
