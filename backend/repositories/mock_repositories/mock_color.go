// Code generated by MockGen. DO NOT EDIT.
// Source: backend/repositories/color.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockColorRepository is a mock of ColorRepository interface
type MockColorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockColorRepositoryMockRecorder
}

// MockColorRepositoryMockRecorder is the mock recorder for MockColorRepository
type MockColorRepositoryMockRecorder struct {
	mock *MockColorRepository
}

// NewMockColorRepository creates a new mock instance
func NewMockColorRepository(ctrl *gomock.Controller) *MockColorRepository {
	mock := &MockColorRepository{ctrl: ctrl}
	mock.recorder = &MockColorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockColorRepository) EXPECT() *MockColorRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockColorRepository) Add(lang, name, code, user string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", lang, name, code, user)
}

// Add indicates an expected call of Add
func (mr *MockColorRepositoryMockRecorder) Add(lang, name, code, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockColorRepository)(nil).Add), lang, name, code, user)
}

// GetAll mocks base method
func (m *MockColorRepository) GetAll(fields []string) []map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", fields)
	ret0, _ := ret[0].([]map[string]interface{})
	return ret0
}

// GetAll indicates an expected call of GetAll
func (mr *MockColorRepositoryMockRecorder) GetAll(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockColorRepository)(nil).GetAll), fields)
}
